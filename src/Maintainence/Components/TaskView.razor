@page "/task/{TaskId}"
@using DAT154Oblig4.Domain.Enums
@using Microsoft.AspNetCore.Components
@using DAT154Oblig4.Application.Dto
@using System.Text.Json
@using System.Text
@using System.Runtime.Serialization.Json
@using System.Net
@inject NavigationManager _navigationManager
@inject HttpClient API

<h3>Task@(ServiceTask != null ? " (Id: " + ServiceTask.Id + ")" : ""):</h3>

@if (NotFound)
{
    <p>Task not found!</p>
}
else
{
    @if (ServiceTask != null)
    {
        
        <EditForm Model="ServiceTask" class="bg-light p-3 rounded" OnSubmit="OnSubmit">
            <div class="form-group mb-3">
                <label for="Description">Description:</label>
                <h5 id="Description">@ServiceTask.Description</h5>
            </div>

            <div class="form-group mb-3">
                <label>Type:</label>
                <h5>@ServiceTask.TaskType</h5>
            </div>
            
            <div class="form-group mb-3">
                <label for="Description">Room:</label>
                <h5 id="Description">@ServiceTask.RoomId</h5>
            </div>
            
            <div class="form-group mb-3">
                <label for="progress">Status</label>
                <div class="d-flex">
                    <button type="button" @onclick="() => ServiceTask.TaskStatus = ServiceTaskStatus.New" class="btn m-2 @(ServiceTask.TaskStatus == ServiceTaskStatus.New ? "btn-success" : "btn-secondary")">
                        New
                    </button>
                    <button type="button" @onclick="() => ServiceTask.TaskStatus = ServiceTaskStatus.Started" class="btn m-2 @(ServiceTask.TaskStatus == ServiceTaskStatus.Started ? "btn-success" : "btn-secondary")">
                        In progress
                    </button>
                    <button type="button" @onclick="() => ServiceTask.TaskStatus = ServiceTaskStatus.Finished" class="btn m-2 @(ServiceTask.TaskStatus == ServiceTaskStatus.Finished ? "btn-success" : "btn-secondary")">
                        Finished
                    </button>
                </div>
            </div>

            <div class="form-group mb-3">
                <label for="notes">Notes:</label>
                <InputTextArea @bind-Value="ServiceTask.Notes" class="form-control" id="notes" rows="3"></InputTextArea>
            </div>

            <button class="btn btn-primary m-1" type="submit">Update task</button>
            <button class="btn btn-secondary m-1" type="button" @onclick="NavigateBack">Cancel</button>
        </EditForm>

    }
    else
    {
        <p>Loading...</p>
    }
    
    @if (ErrorMessage != null)
    {
        <div class="alert alert-danger mt-3" role="alert">
            @ErrorMessage
        </div>
    }
    
}

@code {
    
    [Parameter]
    public string TaskId { get; set; }
    
    [CascadingParameter]
    public AppState State { get; set; }
    
    private ServiceTaskDto? ServiceTask { get; set; }
   
    private string? ErrorMessage { get; set; }

    private bool NotFound { get; set; } = false;

    private int TaskIdAsInteger() => int.Parse(TaskId);

    private async void OnSubmit()
    {
        var patchData = new
        {
            id = ServiceTask?.Id,
            taskStatus = ServiceTask?.TaskStatus,
            notes = ServiceTask?.Notes
        };

        var taskResponse = await API.PatchAsync("https://localhost:5001/api/v1/task", new StringContent(JsonSerializer.Serialize(patchData), Encoding.UTF8, "application/json"));

        if (taskResponse.StatusCode == HttpStatusCode.OK)
        {
            var updatedTaskJson = taskResponse.Content.ReadAsStringAsync().Result;
            var updatedTaskObj = JsonSerializer.Deserialize<ServiceTaskDto>(updatedTaskJson);

            var updatedTasks = State.ServiceTasks.Select(t => t.Id != ServiceTask?.Id ? t : updatedTaskObj).ToList();
            State.ServiceTasks = updatedTasks;

            NavigateBack();
        }
        else
        {
            ErrorMessage = "Error updating task: " + taskResponse.ReasonPhrase;
            StateHasChanged();

            await InvokeAsync(async () =>
            {
                await Task.Delay(3000);
                ErrorMessage = null;
                StateHasChanged();
            });
        }
    }

    private void NavigateBack()
    {
        var nav = ServiceTask?.TaskType switch
        {
            ServiceTaskType.Cleaning => "tasks/cleaning",
            ServiceTaskType.Maintainence => "tasks/maintenance",
            ServiceTaskType.Service => "tasks/service",
            _ => "/"
            };

        _navigationManager.NavigateTo(nav);
    }

    protected override async Task OnInitializedAsync()
    {

        //  && State.ServiceTasks.Any(t => t.Id == TaskIdAsInteger())
        if (State.ServiceTasks != null)
        {
            var serviceTask = State.ServiceTasks.Find(t => t.Id == TaskIdAsInteger());
            if (serviceTask != null)
            {
                ServiceTask = serviceTask;
            }
        }
        else
        {
            try
            {
                ServiceTask = await API.GetFromJsonAsync<ServiceTaskDto>($"https://localhost:5001/api/v1/task/{TaskIdAsInteger()}");
            }
            catch (Exception e)
            {
                Console.WriteLine(e.StackTrace);
                NotFound = true;
            }
        }
    }

}